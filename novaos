#!/bin/bash
#
# NovaOS
# Luka Kobakhidze (Luka287@proton.me)
# https://github.com/Luka287/NovaOS?tab=readme-ov-file
#

# Check if root
if [ "$(id -u)" = 0 ]; then
    echo "##################################################################"
    echo "This script MUST NOT be run as root user since it makes changes"
    echo "to the \$HOME directory of the \$USER executing this script."
    echo "The \$HOME directory of the root user is, of course, '/root'."
    echo "We don't want to mess around in there. So run this script as a"
    echo "normal user. You will be asked for a sudo password when necessary."
    echo "##################################################################"
    exit 1
fi

# Errot script
error() { \
    clear; printf "ERROR:\\n%s\\n" "$1" >&2; exit 1;
}

welcome() { \
	whiptail --title "NovaOS" --msgbox "This is an install script that installs my configs and packages." 8 78
}

welcome || echo "User Exit!"

distrowarning() { \
	whiptail --title "NovaOS!" --msgbox "WARNING! This script is created for Archlinux. You might get an error if you are using other distro!" 16 60 || error "User exit."
}

grep -qs "ID=arfch" /etc/os-release || distrowarning


begininstall() { \
	if whiptail --title "Installing NovaOS" --yesno "Shall we proceed?" 8 78; then
		:
	else
		exit 1
	fi;
}


begininstall || echo "User Exit!"



PASSWORD=$(whiptail --passwordbox "please enter your secret password" 8 78 --title "password dialog" 3>&1 1>&2 2>&3)

exitstatus=$?
if [ $exitstatus == 0 ]; then
    echo "User selected Ok and entered " $PASSWORD
    sudo -S <<< $PASSWORD ./novaos
else
    echo "User selected Cancel."
fi

echo "(Exit status was $exitstatus)"



installyay() { \
	if whiptail --title "Install Yay" --yesno "Some necessary packages are in AUR. Should yay be installed?" 8 78; then
		sudo pacman --noconfirm --needed -Sy git || echo "Error installing git!!!"
		git clone https://aur.archlinux.org/yay.git
		cd yay
		makepkg -si --noconfirm
	else
		:
	fi;
}

#installyay || echo "User Exit!"


installtools() { \
	whiptail --title "Tools and other packages" --yesno "Would you like to install your system tools and other packages like htop, alsa-utils, gparted and more?" 8 60
}

#installtools && yay --noconfirm --needed -Sy acpi alsa-utils htop intel-ucode light linux-firmware linux-headers meson neofetch neovim network-manager-applet pamixer pavucontrol pulseaudio-alsa pulseaudio-ctl xorg starship sof-firmware shell-color-scripts unzip xf86-video-intel xf86-video-vesa


installqtile() { \
	whiptail --title "Window Managers - Qtile" --yesno "Would you like to install qtile?" 8 60
}

#installqtile && yay --noconfirm --needed -Sy qtile qtile-extras python-psutil xss-lock rofi archolinux-logout betterlockscreen-git brightnessctl dunst lxappearance


installhyprland() { \
	whiptail --title "Window Managers - Hyprland" --yesno "Would you like to install hyprland?" 8 60
}

#installhyprland && yay --noconfirm --needed -Sy hyprland wofi wlroots wlogout waylock wayland-logout waybar swayidle libconfig 


eval CHOICES=( $(whiptail --title "Tools to install" \
  --checklist "Choose something" 20 70 9 \
  "librewolf-bin" "Community-maintained fork of Firefox" ON \
  "keepassxc" "Cross-platform password manager" ON \
  "nemo" "Cinnamon file manager" ON \
  "vscodium-bin" "Binary releases of VS Code" ON \
  "qbittorrent" "An advanced BitTorrent client" ON \
  "kitty" "A modern, hackable terminal emulator" ON \
  "etcher-bin" "Flash OS USB drives, safely and easily" ON \
  "vlc" "Multi-platform MPEG, VCD/DVD, and DivX player" ON \
  "lutris" "Open Gaming Platform" ON 3>&1 1>&2 2>&3) )

yay --noconfirm --needed -Sy ${CHOICES[@]}


configsddm(){ \
	yay --noconfirm --needed qt6-svg qt6-declarative wget unzip
	wget https://github.com/catppuccin/sddm/releases/download/v1.0.0/catppuccin-mocha.zip
	unzip catppuccin-mocha.zip
	sudo mv catppuccin-mocha /usr/share/sddm/themes/
	
	## Make multicolor-sddm-theme the default sddm theme ##
	# This is the sddm system configuration file.
	[ -f "/usr/lib/sddm/sddm.conf.d/default.conf" ] && \
    		sudo cp /usr/lib/sddm/sddm.conf.d/default.conf /usr/lib/sddm/sddm.conf.d/default.conf.backup && \
    		sudo sed -i 's/^Current=*.*/Current=catppuccin-mocha/g' /usr/lib/sddm/sddm.conf.d/default.conf

	# This is the sddm local configuration file.
	[ -f "/etc/sddm.conf" ] && \
    		sudo cp /etc/sddm.conf /etc/sddm.conf.backup && \
    		sudo sed -i 's/^Current=*.*/Current=catppuccin-mocha/g' /etc/sddm.conf

	# Create a local configuration file if it doesn't exist.
	# Standard Arch Linux does not create this file by default.
	[ ! -f "/etc/sddm.conf" ] && \
	    sudo cp /usr/lib/sddm/sddm.conf.d/default.conf /etc/sddm.conf || echo "Default sddm system config file is not found." 

}

installsddm() { \ 
	whiptail --title "Display manager - Sddm" --yesno "Would you like to install and configure sddm display manager?" 8 60
}

installsddm && configsddm 



grubtheme() { \
	git clone https://github.com/sandesh236/sleek--themes.git
	cd sleek--themes/Sleek\ theme-dark/
	sudo ./install.sh
}

installgrubtheme() { \
	wiptail --title "Grub theme" --yesno "Would you like to install sleek-dark grub theme?" 8 60
}


installgrubtheme && grubtheme

echo "################################"
echo "## NovaOS has been installed! ##"
echo "################################"

while true; do
    read -p "Do you want to reboot to get your NovaOS? [Y/n] " yn
    case $yn in
        [Yy]* ) reboot;;
        [Nn]* ) break;;
        "" ) reboot;;
        * ) echo "Please answer yes or no.";;
    esac
done


